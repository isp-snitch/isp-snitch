name: Homebrew Formula Update

on:
  push:
    branches: [ main ]
    paths:
      - 'Formula/isp-snitch.rb'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update'
        required: true
        default: '1.0.0'

jobs:
  update-formula:
    name: Update Homebrew Formula
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "6.0"
        
    - name: Get current SHA256
      id: current_sha
      run: |
        CURRENT_SHA=$(curl -sL "https://github.com/isp-snitch/isp-snitch/archive/refs/heads/main.tar.gz" | shasum -a 256 | cut -d' ' -f1)
        echo "sha256=$CURRENT_SHA" >> $GITHUB_OUTPUT
        echo "Current SHA256: $CURRENT_SHA"
        
    - name: Update formula SHA256
      run: |
        sed -i '' "s/sha256 \".*\"/sha256 \"${{ steps.current_sha.outputs.sha256 }}\"/" Formula/isp-snitch.rb
        
    - name: Validate formula
      run: |
        ruby -c Formula/isp-snitch.rb
        echo "Formula syntax is valid"
        
    - name: Test formula installation
      run: |
        # Test formula syntax and structure
        if grep -q "class IspSnitch < Formula" Formula/isp-snitch.rb; then
          echo "✅ Formula class definition found"
        else
          echo "❌ Formula class definition missing"
          exit 1
        fi
        
        if grep -q "depends_on" Formula/isp-snitch.rb; then
          echo "✅ Dependencies defined"
        else
          echo "❌ No dependencies defined"
        fi
        
        if grep -q "def install" Formula/isp-snitch.rb; then
          echo "✅ Install method found"
        else
          echo "❌ Install method missing"
          exit 1
        fi
        
        if grep -q "test do" Formula/isp-snitch.rb; then
          echo "✅ Test method found"
        else
          echo "⚠️ No test method found"
        fi
        
        if grep -q "service do" Formula/isp-snitch.rb; then
          echo "✅ Service configuration found"
        else
          echo "⚠️ No service configuration found"
        fi
        
    - name: Commit formula update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Formula/isp-snitch.rb
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update formula SHA256 to ${{ steps.current_sha.outputs.sha256 }}"
          git push
        fi
        
    - name: Create PR for Homebrew tap
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Creating PR for Homebrew tap update..."
        # This would typically update the actual Homebrew tap repository
        # For now, we'll just log the action
        echo "Formula updated with SHA256: ${{ steps.current_sha.outputs.sha256 }}"
        echo "Ready for Homebrew tap update"

  test-installation:
    name: Test Homebrew Installation
    runs-on: macos-latest
    needs: update-formula
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: "6.0"
        
    - name: Install Homebrew dependencies
      run: |
        brew install sqlite
        brew install speedtest-cli || echo "speedtest-cli not available"
        brew install curl || echo "curl not available"
        brew install bind || echo "bind not available"
        
    - name: Test formula installation
      run: |
        # Test the formula without actually installing
        echo "Testing formula structure..."
        ruby -c Formula/isp-snitch.rb
        
        # Test formula dependencies
        echo "Testing formula dependencies..."
        if brew deps --formula Formula/isp-snitch.rb > /dev/null 2>&1; then
          echo "✅ Formula dependencies are valid"
        else
          echo "⚠️ Some formula dependencies may not be available"
        fi
        
        # Test formula test block
        echo "Testing formula test block..."
        if brew test --dry-run --formula Formula/isp-snitch.rb > /dev/null 2>&1; then
          echo "✅ Formula test block is valid"
        else
          echo "⚠️ Formula test block may have issues"
        fi
        
    - name: Validate package structure
      run: |
        echo "Validating package structure..."
        
        # Check if package file exists
        if [ -f "dist/isp-snitch-1.0.0.tar.gz" ]; then
          echo "✅ Package file exists"
          
          # Test package size
          PACKAGE_SIZE=$(du -h "dist/isp-snitch-1.0.0.tar.gz" | cut -f1)
          echo "✅ Package size: $PACKAGE_SIZE"
          
          # Test SHA256 hash
          ACTUAL_SHA256=$(shasum -a 256 "dist/isp-snitch-1.0.0.tar.gz" | cut -d' ' -f1)
          EXPECTED_SHA256=$(grep "sha256" Formula/isp-snitch.rb | cut -d'"' -f2)
          
          if [ "$ACTUAL_SHA256" = "$EXPECTED_SHA256" ]; then
            echo "✅ SHA256 hash matches"
          else
            echo "❌ SHA256 hash mismatch"
            echo "Expected: $EXPECTED_SHA256"
            echo "Actual: $ACTUAL_SHA256"
            exit 1
          fi
        else
          echo "❌ Package file not found"
          echo "Run: ./Scripts/build-package.sh"
          exit 1
        fi
        
    - name: Test service scripts
      run: |
        echo "Testing service management scripts..."
        
        # Check if scripts exist and are executable
        for script in Scripts/*.sh; do
          if [ -f "$script" ]; then
            if [ -x "$script" ]; then
              echo "✅ $script is executable"
            else
              echo "❌ $script is not executable"
              exit 1
            fi
          else
            echo "❌ $script not found"
            exit 1
          fi
        done
        
        # Test script syntax
        for script in Scripts/*.sh; do
          if bash -n "$script"; then
            echo "✅ $script syntax is valid"
          else
            echo "❌ $script syntax error"
            exit 1
          fi
        done
