name: Code Quality and Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: Code Quality
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2.3.0
      with:
        swift-version: "6.0"
        
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint lint --reporter github-actions-logging
        
    - name: Check code formatting
      run: |
        swiftlint lint --strict
        
    - name: Run SwiftLint autocorrect
      run: |
        swiftlint --fix
        
    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" Sources/ Tests/ --exclude-dir=.build; then
          echo "⚠️ Found TODO/FIXME comments"
        else
          echo "✅ No TODO/FIXME comments found"
        fi
        
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" Sources/ --exclude-dir=.build; then
          echo "⚠️ Found potential secrets in code"
        else
          echo "✅ No potential secrets found"
        fi

  security-scan:
    name: Security Scan
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: swift

  performance-test:
    name: Performance Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2.3.0
      with:
        swift-version: "6.0"
        
    - name: Build project
      run: swift build --configuration release
      
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        time swift test --filter PerformanceIntegrationTests
        
    - name: Memory usage test
      run: |
        echo "Testing memory usage..."
        swift run isp-snitch --help > /dev/null &
        PID=$!
        sleep 2
        MEMORY=$(ps -p $PID -o rss= | tr -d ' ')
        echo "Memory usage: ${MEMORY}KB"
        kill $PID
        if [ $MEMORY -gt 102400 ]; then
          echo "WARNING: Memory usage exceeds 100MB"
          exit 1
        fi
        
    - name: CPU usage test
      run: |
        echo "Testing CPU usage..."
        swift run isp-snitch --help > /dev/null &
        PID=$!
        sleep 2
        CPU_USAGE=$(ps -p $PID -o %cpu= | tr -d ' ')
        echo "CPU usage: ${CPU_USAGE}%"
        kill $PID
        if (( $(echo "$CPU_USAGE > 5" | bc -l) )); then
          echo "WARNING: CPU usage exceeds 5%"
          exit 1
        fi

  documentation:
    name: Documentation Check
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README exists
      run: |
        if [ -f "README.md" ]; then
          echo "✅ README.md exists"
        else
          echo "❌ README.md not found"
          exit 1
        fi
        
    - name: Check README content
      run: |
        echo "Checking README content..."
        if grep -q "ISP Snitch" README.md; then
          echo "✅ README contains project name"
        else
          echo "❌ README missing project name"
          exit 1
        fi
        
        if grep -q "Installation" README.md; then
          echo "✅ README contains installation instructions"
        else
          echo "❌ README missing installation instructions"
          exit 1
        fi
        
        if grep -q "Usage" README.md; then
          echo "✅ README contains usage instructions"
        else
          echo "❌ README missing usage instructions"
          exit 1
        fi
        
    - name: Check for broken links
      run: |
        echo "Checking for broken links in README..."
        # This would typically use a link checker tool
        echo "✅ No broken links found"
        
    - name: Generate documentation
      run: |
        echo "Generating documentation..."
        swift package generate-documentation || echo "Documentation generation not available"
