name: Version Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      custom_version:
        description: 'Custom version (overrides version_type)'
        required: false
        type: string

jobs:
  update-version:
    name: Update Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(grep 'let version' Package.swift | sed 's/.*"\(.*\)".*/\1/')
        echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
        
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
        
        if [ -n "${{ github.event.inputs.custom_version }}" ]; then
          NEW_VERSION="${{ github.event.inputs.custom_version }}"
        else
          case "${{ github.event.inputs.version_type }}" in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            minor)
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            patch)
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
          esac
        fi
        
        echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Update Package.swift
      run: |
        CURRENT="${{ steps.current_version.outputs.current }}"
        NEW="${{ steps.new_version.outputs.new }}"
        sed -i "s/let version = \"$CURRENT\"/let version = \"$NEW\"/" Package.swift
        
    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Package.swift
        git commit -m "Bump version to ${{ steps.new_version.outputs.new }}"
        git push origin main
        
    - name: Create tag
      run: |
        git tag "v${{ steps.new_version.outputs.new }}"
        git push origin "v${{ steps.new_version.outputs.new }}"
        
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.new_version.outputs.new }}"
        release_name: "Release v${{ steps.new_version.outputs.new }}"
        body: |
          ## ISP Snitch v${{ steps.new_version.outputs.new }}
          
          ### Changes
          - Version bump to ${{ steps.new_version.outputs.new }}
          
          ### Installation
          ```bash
          brew install isp-snitch/isp-snitch/isp-snitch
          ```
        draft: false
        prerelease: false
